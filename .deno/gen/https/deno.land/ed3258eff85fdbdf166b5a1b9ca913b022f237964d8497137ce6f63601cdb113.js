// deno-lint-ignore-file ban-types
//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["https://deno.land/x/grammy_types@v3.11.0/methods.ts"],"sourcesContent":["// deno-lint-ignore-file ban-types\nimport type { InlineQueryResult, InlineQueryResultsButton } from \"./inline.ts\";\nimport type {\n  BotCommand,\n  BusinessConnection,\n  ChatAdministratorRights,\n  ChatInviteLink,\n  ChatMember,\n  ChatMemberAdministrator,\n  ChatMemberOwner,\n  ChatPermissions,\n  ForumTopic,\n  UserChatBoosts,\n  UserFromGetMe,\n  UserProfilePhotos,\n  WebhookInfo,\n} from \"./manage.ts\";\nimport type { ChatFullInfo } from \"./manage.ts\";\nimport type {\n  ForceReply,\n  InlineKeyboardMarkup,\n  ReplyKeyboardMarkup,\n  ReplyKeyboardRemove,\n} from \"./markup.ts\";\nimport type {\n  File,\n  GameHighScore,\n  InputPollOption,\n  LinkPreviewOptions,\n  MaskPosition,\n  Message,\n  MessageEntity,\n  MessageId,\n  ParseMode,\n  Poll,\n  ReactionType,\n  ReplyParameters,\n  SentWebAppMessage,\n  Sticker,\n  StickerSet,\n} from \"./message.ts\";\nimport type { PassportElementError } from \"./passport.ts\";\nimport type {\n  LabeledPrice,\n  ShippingOption,\n  StarTransactions,\n} from \"./payment.ts\";\nimport type {\n  BotCommandScope,\n  BotDescription,\n  BotName,\n  BotShortDescription,\n  MenuButton,\n} from \"./settings.ts\";\nimport type { Update } from \"./update.ts\";\nimport type { LanguageCode } from \"./langs.ts\";\n\n/** Extracts the parameters of a given method name */\ntype Params<F, M extends keyof ApiMethods<F>> = Parameters<ApiMethods<F>[M]>;\n\n/** Utility type providing the argument type for the given method name or `{}` if the method does not take any parameters */\nexport type Opts<F> = {\n  [M in keyof ApiMethods<F>]: Params<F, M>[0] extends undefined ? {}\n    : NonNullable<Params<F, M>[0]>;\n};\n\n/** Wrapper type to bundle all methods of the Telegram Bot API */\nexport type ApiMethods<F> = {\n  /** Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects.\n\n  Notes\n  1. This method will not work if an outgoing webhook is set up.\n  2. In order to avoid getting duplicate updates, recalculate offset after each server response. */\n  getUpdates(args?: {\n    /** Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will be forgotten. */\n    offset?: number;\n    /** Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100. */\n    limit?: number;\n    /** Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only. */\n    timeout?: number;\n    /** A list of the update types you want your bot to receive. For example, specify [\"message\", \"edited_channel_post\", \"callback_query\"] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member, message_reaction, and message_reaction_count (default). If not specified, the previous setting will be used.\n\n    Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time. */\n    allowed_updates?: ReadonlyArray<Exclude<keyof Update, \"update_id\">>;\n  }): Update[];\n\n  /** Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.\n\n  If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.\n\n  Notes\n  1. You will not be able to receive updates using getUpdates for as long as an outgoing webhook is set up.\n  2. To use a self-signed certificate, you need to upload your public key certificate using certificate parameter. Please upload as InputFile, sending a String will not work.\n  3. Ports currently supported for Webhooks: 443, 80, 88, 8443.\n\n  If you're having any trouble setting up webhooks, please check out this amazing guide to webhooks. */\n  setWebhook(args: {\n    /** HTTPS URL to send updates to. Use an empty string to remove webhook integration */\n    url: string;\n    /** Upload your public key certificate so that the root certificate in use can be checked. See our self-signed guide for details. */\n    certificate?: F;\n    /** The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS */\n    ip_address?: string;\n    /** The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput. */\n    max_connections?: number;\n    /** A list of the update types you want your bot to receive. For example, specify [\"message\", \"edited_channel_post\", \"callback_query\"] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member, message_reaction, and message_reaction_count (default). If not specified, the previous setting will be used.\n\n    Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time. */\n    allowed_updates?: ReadonlyArray<Exclude<keyof Update, \"update_id\">>;\n    /** Pass True to drop all pending updates */\n    drop_pending_updates?: boolean;\n    /** A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request, 1-256 characters. Only characters A-Z, a-z, 0-9, _ and - are allowed. The header is useful to ensure that the request comes from a webhook set by you. */\n    secret_token?: string;\n  }): true;\n\n  /** Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success. */\n  deleteWebhook(args?: {\n    /** Pass True to drop all pending updates */\n    drop_pending_updates?: boolean;\n  }): true;\n\n  /** Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty. */\n  getWebhookInfo(): WebhookInfo;\n\n  /** A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object. */\n  getMe(): UserFromGetMe;\n\n  /** Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters. */\n  logOut(): true;\n\n  /** Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters. */\n  close(): true;\n\n  /** Use this method to send text messages. On success, the sent Message is returned. */\n  sendMessage(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Text of the message to be sent, 1-4096 characters after entities parsing */\n    text: string;\n    /** Mode for parsing entities in the message text. See formatting options for more details. */\n    parse_mode?: ParseMode;\n    /** A list of special entities that appear in message text, which can be specified instead of parse_mode */\n    entities?: MessageEntity[];\n    /** Link preview generation options for the message */\n    link_preview_options?: LinkPreviewOptions;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.TextMessage;\n\n  /** Use this method to forward messages of any kind. Service messages and messages with protected content can't be forwarded. On success, the sent Message is returned. */\n  forwardMessage(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername) */\n    from_chat_id: number | string;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the forwarded message from forwarding and saving */\n    protect_content?: boolean;\n    /** Message identifier in the chat specified in from_chat_id */\n    message_id: number;\n  }): Message;\n\n  /** Use this method to forward multiple messages of any kind. If some of the specified messages can't be found or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded. Album grouping is kept for forwarded messages. On success, an array of MessageId of the sent messages is returned. */\n  forwardMessages(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Unique identifier for the chat where the original messages were sent (or channel username in the format @channelusername) */\n    from_chat_id: number | string;\n    /** A list of 1-100 identifiers of messages in the chat from_chat_id to forward. The identifiers must be specified in a strictly increasing order. */\n    message_ids: number[];\n    /** Sends the messages silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the forwarded messages from forwarding and saving */\n    protect_content?: boolean;\n  }): MessageId[];\n\n  /** Use this method to copy messages of any kind. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success. */\n  copyMessage(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername) */\n    from_chat_id: number | string;\n    /** Message identifier in the chat specified in from_chat_id */\n    message_id: number;\n    /** New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept */\n    caption?: string;\n    /** Mode for parsing entities in the new caption. See formatting options for more details. */\n    parse_mode?: string;\n    /** A list of special entities that appear in the new caption, which can be specified instead of parse_mode */\n    caption_entities?: MessageEntity[];\n    /** Pass True, if the caption must be shown above the message media. Ignored if a new caption isn't specified. */\n    show_caption_above_media?: boolean;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): MessageId;\n\n  /** Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessages, but the copied messages don't have a link to the original message. Album grouping is kept for copied messages. On success, an array of MessageId of the sent messages is returned. */\n  copyMessages(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Unique identifier for the chat where the original messages were sent (or channel username in the format @channelusername) */\n    from_chat_id: number | string;\n    /** A list of 1-100 identifiers of messages in the chat from_chat_id to copy. The identifiers must be specified in a strictly increasing order. */\n    message_ids: number[];\n    /** Sends the messages silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent messages from forwarding and saving */\n    protect_content?: boolean;\n    /** Pass True to copy the messages without their captions */\n    remove_caption?: boolean;\n  }): MessageId[];\n\n  /** Use this method to send photos. On success, the sent Message is returned. */\n  sendPhoto(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. */\n    photo: F | string;\n    /** Photo caption (may also be used when resending photos by file_id), 0-1024 characters after entities parsing */\n    caption?: string;\n    /** Mode for parsing entities in the photo caption. See formatting options for more details. */\n    parse_mode?: ParseMode;\n    /** A list of special entities that appear in the caption, which can be specified instead of parse_mode */\n    caption_entities?: MessageEntity[];\n    /** Pass True, if the caption must be shown above the message media */\n    show_caption_above_media?: boolean;\n    /** Pass True if the photo needs to be covered with a spoiler animation */\n    has_spoiler?: boolean;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.PhotoMessage;\n\n  /** Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.\n\n  For sending voice messages, use the sendVoice method instead. */\n  sendAudio(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. */\n    audio: F | string;\n    /** Audio caption, 0-1024 characters after entities parsing */\n    caption?: string;\n    /** Mode for parsing entities in the audio caption. See formatting options for more details. */\n    parse_mode?: ParseMode;\n    /** A list of special entities that appear in the caption, which can be specified instead of parse_mode */\n    caption_entities?: MessageEntity[];\n    /** Duration of the audio in seconds */\n    duration?: number;\n    /** Performer */\n    performer?: string;\n    /** Track name */\n    title?: string;\n    /** Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. */\n    thumbnail?: F;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.AudioMessage;\n\n  /** Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future. */\n  sendDocument(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. */\n    document: F | string;\n    /** Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. */\n    thumbnail?: F;\n    /** Document caption (may also be used when resending documents by file_id), 0-1024 characters after entities parsing */\n    caption?: string;\n    /** Mode for parsing entities in the document caption. See formatting options for more details. */\n    parse_mode?: ParseMode;\n    /** A list of special entities that appear in the caption, which can be specified instead of parse_mode */\n    caption_entities?: MessageEntity[];\n    /** Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album. */\n    disable_content_type_detection?: boolean;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.DocumentMessage;\n\n  /** Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future. */\n  sendVideo(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. */\n    video: F | string;\n    /** Duration of sent video in seconds */\n    duration?: number;\n    /** Video width */\n    width?: number;\n    /** Video height */\n    height?: number;\n    /** Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. */\n    thumbnail?: F;\n    /** Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing */\n    caption?: string;\n    /** Mode for parsing entities in the video caption. See formatting options for more details. */\n    parse_mode?: ParseMode;\n    /** A list of special entities that appear in the caption, which can be specified instead of parse_mode */\n    caption_entities?: MessageEntity[];\n    /** Pass True, if the caption must be shown above the message media */\n    show_caption_above_media?: boolean;\n    /** Pass True if the video needs to be covered with a spoiler animation */\n    has_spoiler?: boolean;\n    /** Pass True if the uploaded video is suitable for streaming */\n    supports_streaming?: boolean;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.VideoMessage;\n\n  /** Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future. */\n  sendAnimation(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. */\n    animation: F | string;\n    /** Duration of sent animation in seconds */\n    duration?: number;\n    /** Animation width */\n    width?: number;\n    /** Animation height */\n    height?: number;\n    /** Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. */\n    thumbnail?: F;\n    /** Animation caption (may also be used when resending animation by file_id), 0-1024 characters after entities parsing */\n    caption?: string;\n    /** Mode for parsing entities in the animation caption. See formatting options for more details. */\n    parse_mode?: ParseMode;\n    /** A list of special entities that appear in the caption, which can be specified instead of parse_mode */\n    caption_entities?: MessageEntity[];\n    /** Pass True, if the caption must be shown above the message media */\n    show_caption_above_media?: boolean;\n    /** Pass True if the animation needs to be covered with a spoiler animation */\n    has_spoiler?: boolean;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.AnimationMessage;\n\n  /** Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future. */\n  sendVoice(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. */\n    voice: F | string;\n    /** Voice message caption, 0-1024 characters after entities parsing */\n    caption?: string;\n    /** Mode for parsing entities in the voice message caption. See formatting options for more details. */\n    parse_mode?: ParseMode;\n    /** A list of special entities that appear in the caption, which can be specified instead of parse_mode */\n    caption_entities?: MessageEntity[];\n    /** Duration of the voice message in seconds */\n    duration?: number;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.VoiceMessage;\n\n  /** Use this method to send video messages. On success, the sent Message is returned.\n  As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. */\n  sendVideoNote(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data.. Sending video notes by a URL is currently unsupported */\n    video_note: F | string;\n    /** Duration of sent video in seconds */\n    duration?: number;\n    /** Video width and height, i.e. diameter of the video message */\n    length?: number;\n    /** Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. */\n    thumbnail?: F;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.VideoNoteMessage;\n\n  /** Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned. */\n  sendMediaGroup(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** An array describing messages to be sent, must include 2-10 items */\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    media: ReadonlyArray<\n      | InputMediaAudio<F>\n      | InputMediaDocument<F>\n      | InputMediaPhoto<F>\n      | InputMediaVideo<F>\n    >;\n    /** Sends the messages silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent messages from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Array<\n    | Message.AudioMessage\n    | Message.DocumentMessage\n    | Message.PhotoMessage\n    | Message.VideoMessage\n  >;\n\n  /** Use this method to send point on the map. On success, the sent Message is returned. */\n  sendLocation(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Latitude of the location */\n    latitude: number;\n    /** Longitude of the location */\n    longitude: number;\n    /** The radius of uncertainty for the location, measured in meters; 0-1500 */\n    horizontal_accuracy?: number;\n    /** Period in seconds during which the location will be updated (see Live Locations, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely. */\n    live_period?: number;\n    /** The direction in which user is moving, in degrees; 1-360. For active live locations only. */\n    heading?: number;\n    /** The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only. */\n    proximity_alert_radius?: number;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.LocationMessage;\n\n  /** Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. */\n  editMessageLiveLocation(args: {\n    /** Unique identifier of the business connection on behalf of which the message to be edited was sent */\n    business_connection_id?: string;\n    /** Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id?: number | string;\n    /** Required if inline_message_id is not specified. Identifier of the message to edit */\n    message_id?: number;\n    /** Required if chat_id and message_id are not specified. Identifier of the inline message */\n    inline_message_id?: string;\n    /** Latitude of new location */\n    latitude: number;\n    /** Longitude of new location */\n    longitude: number;\n    /** New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current live_period by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then live_period remains unchanged */\n    live_period?: number;\n    /** The radius of uncertainty for the location, measured in meters; 0-1500 */\n    horizontal_accuracy?: number;\n    /** The direction in which user is moving, in degrees; 1-360. For active live locations only. */\n    heading?: number;\n    /** The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only. */\n    proximity_alert_radius?: number;\n    /** An object for a new inline keyboard. */\n    reply_markup?: InlineKeyboardMarkup;\n  }): (Update.Edited & Message.LocationMessage) | true;\n\n  /** Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned. */\n  stopMessageLiveLocation(args: {\n    /** Unique identifier of the business connection on behalf of which the message to be edited was sent */\n    business_connection_id?: string;\n    /** Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id?: number | string;\n    /** Required if inline_message_id is not specified. Identifier of the message with live location to stop */\n    message_id?: number;\n    /** Required if chat_id and message_id are not specified. Identifier of the inline message */\n    inline_message_id?: string;\n    /** An object for a new inline keyboard. */\n    reply_markup?: InlineKeyboardMarkup;\n  }): (Update.Edited & Message.LocationMessage) | true;\n\n  /** Use this method to send paid media to channel chats. On success, the sent Message is returned. */\n  sendPaidMedia(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** The number of Telegram Stars that must be paid to buy access to the media */\n    star_count: number;\n    /** An array describing the media to be sent; up to 10 items */\n    media: InputPaidMedia<F>[];\n    /** Media caption, 0-1024 characters after entities parsing */\n    caption?: string;\n    /** Mode for parsing entities in the media caption. See formatting options for more details. */\n    parse_mode?: string;\n    /** A list of special entities that appear in the caption, which can be specified instead of parse_mode */\n    caption_entities?: MessageEntity[];\n    /** Pass True, if the caption must be shown above the message media */\n    show_caption_above_media?: boolean;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n  }): Message.PaidMediaMessage;\n\n  /** Use this method to send information about a venue. On success, the sent Message is returned. */\n  sendVenue(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Latitude of the venue */\n    latitude: number;\n    /** Longitude of the venue */\n    longitude: number;\n    /** Name of the venue */\n    title: string;\n    /** Address of the venue */\n    address: string;\n    /** Foursquare identifier of the venue */\n    foursquare_id?: string;\n    /** Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.) */\n    foursquare_type?: string;\n    /** Google Places identifier of the venue */\n    google_place_id?: string;\n    /** Google Places type of the venue. (See supported types.) */\n    google_place_type?: string;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.VenueMessage;\n\n  /** Use this method to send phone contacts. On success, the sent Message is returned. */\n  sendContact(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Contact's phone number */\n    phone_number: string;\n    /** Contact's first name */\n    first_name: string;\n    /** Contact's last name */\n    last_name?: string;\n    /** Additional data about the contact in the form of a vCard, 0-2048 bytes */\n    vcard?: string;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.ContactMessage;\n\n  /** Use this method to send a native poll. On success, the sent Message is returned. */\n  sendPoll(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Poll question, 1-300 characters */\n    question: string;\n    /** Mode for parsing entities in the question. See formatting options for more details. Currently, only custom emoji entities are allowed */\n    question_parse_mode?: string;\n    /** A list of special entities that appear in the poll question. It can be specified instead of question_parse_mode */\n    question_entities?: MessageEntity[];\n    /** A list of 2-10 answer options */\n    options: InputPollOption[];\n    /** True, if the poll needs to be anonymous, defaults to True */\n    is_anonymous?: boolean;\n    /** Poll type, “quiz” or “regular”, defaults to “regular” */\n    type?: \"quiz\" | \"regular\";\n    /** True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False */\n    allows_multiple_answers?: boolean;\n    /** 0-based identifier of the correct answer option, required for polls in quiz mode */\n    correct_option_id?: number;\n    /** Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing */\n    explanation?: string;\n    /** Mode for parsing entities in the explanation. See formatting options for more details. */\n    explanation_parse_mode?: ParseMode;\n    /** A list of special entities that appear in the poll explanation. It can be specified instead of explanation_parse_mode */\n    explanation_entities?: MessageEntity[];\n    /** Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date. */\n    open_period?: number;\n    /** Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period. */\n    close_date?: number;\n    /** Pass True if the poll needs to be immediately closed. This can be useful for poll preview. */\n    is_closed?: boolean;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.PollMessage;\n\n  /** Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned. */\n  sendDice(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Emoji on which the dice throw animation is based. Currently, must be one of \"🎲\", \"🎯\", \"🏀\", \"⚽\", \"🎳\", or \"🎰\". Dice can have values 1-6 for \"🎲\", \"🎯\" and \"🎳\", values 1-5 for \"🏀\" and \"⚽\", and values 1-64 for \"🎰\". Defaults to \"🎲\" */\n    emoji?: string;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.DiceMessage;\n\n  /** Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.\n\n  Example: The ImageBot needs some time to process a request and upload the image. Instead of sending a text message along the lines of \"Retrieving image, please wait...\", the bot may use sendChatAction with action = upload_photo. The user will see a \"sending photo\" status for the bot.\n\n  We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive. */\n  sendChatAction(args: {\n    /** Unique identifier of the business connection on behalf of which the action will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, choose_sticker for stickers, find_location for location data, record_video_note or upload_video_note for video notes. */\n    action:\n      | \"typing\"\n      | \"upload_photo\"\n      | \"record_video\"\n      | \"upload_video\"\n      | \"record_voice\"\n      | \"upload_voice\"\n      | \"upload_document\"\n      | \"choose_sticker\"\n      | \"find_location\"\n      | \"record_video_note\"\n      | \"upload_video_note\";\n    /** Unique identifier for the target message thread; for supergroups only */\n    message_thread_id?: number;\n  }): true;\n\n  /** Use this method to change the chosen reactions on a message. Service messages can't be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. In albums, bots must react to the first message. Returns True on success. */\n  setMessageReaction(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Identifier of the target message */\n    message_id: number;\n    /** A list of reaction types to set on the message. Currently, as non-premium users, bots can set up to one reaction per message. A custom emoji reaction can be used if it is either already present on the message or explicitly allowed by chat administrators. */\n    reaction?: ReactionType[];\n    /** Pass True to set the reaction with a big animation */\n    is_big?: boolean;\n  }): true;\n\n  /** Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object. */\n  getUserProfilePhotos(args: {\n    /** Unique identifier of the target user */\n    user_id: number;\n    /** Sequential number of the first photo to be returned. By default, all photos are returned. */\n    offset?: number;\n    /** Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100. */\n    limit?: number;\n  }): UserProfilePhotos;\n\n  /** Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.\n\n  Note: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received. */\n  getFile(args: {\n    /** File identifier to get information about */\n    file_id: string;\n  }): File;\n\n  /** Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n   * @deprecated Use `banChatMember` instead. */\n  kickChatMember: ApiMethods<F>[\"banChatMember\"];\n\n  /** Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. */\n  banChatMember(args: {\n    /** Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target user */\n    user_id: number;\n    /** Date when the user will be unbanned; Unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only. */\n    until_date?: number;\n    /** Pass True to delete all messages from the chat for the user that is being removed. If False, the user will be able to see messages in the group that were sent before the user was removed. Always True for supergroups and channels. */\n    revoke_messages?: boolean;\n  }): true;\n\n  /** Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success. */\n  unbanChatMember(args: {\n    /** Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target user */\n    user_id: number;\n    /** Do nothing if the user is not banned */\n    only_if_banned?: boolean;\n  }): true;\n\n  /** Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success. */\n  restrictChatMember(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target user */\n    user_id: number;\n    /** An object for new user permissions */\n    permissions: ChatPermissions;\n    /** Pass True if chat permissions are set independently. Otherwise, the can_send_other_messages and can_add_web_page_previews permissions will imply the can_send_messages, can_send_audios, can_send_documents, can_send_photos, can_send_videos, can_send_video_notes, and can_send_voice_notes permissions; the can_send_polls permission will imply the can_send_messages permission. */\n    use_independent_chat_permissions?: boolean;\n    /** Date when restrictions will be lifted for the user; Unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever */\n    until_date?: number;\n  }): true;\n\n  /** Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success. */\n  promoteChatMember(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target user */\n    user_id: number;\n    /** Pass True if the administrator's presence in the chat is hidden */\n    is_anonymous?: boolean;\n    /** Pass True if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege. */\n    can_manage_chat?: boolean;\n    /** Pass True if the administrator can delete messages of other users */\n    can_delete_messages?: boolean;\n    /** Pass True if the administrator can manage video chats */\n    can_manage_video_chats?: boolean;\n    /** Pass True if the administrator can restrict, ban or unban chat members, or access supergroup statistics */\n    can_restrict_members?: boolean;\n    /** Pass True if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him) */\n    can_promote_members?: boolean;\n    /** Pass True if the administrator can change chat title, photo and other settings */\n    can_change_info?: boolean;\n    /** Pass True if the administrator can invite new users to the chat */\n    can_invite_users?: boolean;\n    /** True if the administrator can post stories to the chat */\n    can_post_stories?: boolean;\n    /** Pass True if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive */\n    can_edit_stories?: boolean;\n    /** True if the administrator can delete stories posted by other users */\n    can_delete_stories?: boolean;\n    /** True if the administrator can post messages in the channel, or access channel statistics; for channels only */\n    can_post_messages?: boolean;\n    /** True if the administrator can edit messages of other users and can pin messages; for channels only */\n    can_edit_messages?: boolean;\n    /** True if the administrator can pin messages; for supergroups only */\n    can_pin_messages?: boolean;\n    /** True if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only */\n    can_manage_topics?: boolean;\n  }): true;\n\n  /** Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success. */\n  setChatAdministratorCustomTitle(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target user */\n    user_id: number;\n    /** New custom title for the administrator; 0-16 characters, emoji are not allowed */\n    custom_title: string;\n  }): true;\n\n  /** Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success. */\n  banChatSenderChat(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target sender chat */\n    sender_chat_id: number;\n  }): true;\n\n  /** Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success. */\n  unbanChatSenderChat(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target sender chat */\n    sender_chat_id: number;\n  }): true;\n\n  /** Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success. */\n  setChatPermissions(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** An object for new default chat permissions */\n    permissions: ChatPermissions;\n    /** Pass True if chat permissions are set independently. Otherwise, the can_send_other_messages and can_add_web_page_previews permissions will imply the can_send_messages, can_send_audios, can_send_documents, can_send_photos, can_send_videos, can_send_video_notes, and can_send_voice_notes permissions; the can_send_polls permission will imply the can_send_messages permission. */\n    use_independent_chat_permissions?: boolean;\n  }): true;\n\n  /** Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success.\n\n  Note: Each administrator in a chat generates their own invite links. Bots can't use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using exportChatInviteLink or by calling the getChat method. If your bot needs to generate a new primary invite link replacing its previous one, use exportChatInviteLink again. */\n  exportChatInviteLink(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n  }): string;\n\n  /** Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. */\n  createChatInviteLink(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Invite link name; 0-32 characters */\n    name?: string;\n    /** Point in time (Unix timestamp) when the link will expire */\n    expire_date?: number;\n    /** The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999 */\n    member_limit?: number;\n    /** True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified */\n    creates_join_request?: boolean;\n  }): ChatInviteLink;\n\n  /** Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object. */\n  editChatInviteLink(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** The invite link to edit */\n    invite_link: string;\n    /** Invite link name; 0-32 characters */\n    name?: string;\n    /** Point in time (Unix timestamp) when the link will expire */\n    expire_date?: number;\n    /** The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999 */\n    member_limit?: number;\n    /** True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified */\n    creates_join_request?: boolean;\n  }): ChatInviteLink;\n\n  /** Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object. */\n  revokeChatInviteLink(args: {\n    /** Unique identifier of the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** The invite link to revoke */\n    invite_link: string;\n  }): ChatInviteLink;\n\n  /** Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. */\n  approveChatJoinRequest(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target user */\n    user_id: number;\n  }): true;\n\n  /** Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. */\n  declineChatJoinRequest(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target user */\n    user_id: number;\n  }): true;\n\n  /** Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. */\n  setChatPhoto(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** New chat photo, uploaded using multipart/form-data */\n    photo: F;\n  }): true;\n\n  /** Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. */\n  deleteChatPhoto(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n  }): true;\n\n  /** Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. */\n  setChatTitle(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** New chat title, 1-128 characters */\n    title: string;\n  }): true;\n\n  /** Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. */\n  setChatDescription(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** New chat description, 0-255 characters */\n    description?: string;\n  }): true;\n\n  /** Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in a supergroup or 'can_edit_messages' admin right in a channel. Returns True on success. */\n  pinChatMessage(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Identifier of a message to pin */\n    message_id: number;\n    /** Pass True if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats. */\n    disable_notification?: boolean;\n  }): true;\n\n  /** Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in a supergroup or 'can_edit_messages' admin right in a channel. Returns True on success. */\n  unpinChatMessage(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned. */\n    message_id?: number;\n  }): true;\n\n  /** Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in a supergroup or 'can_edit_messages' admin right in a channel. Returns True on success. */\n  unpinAllChatMessages(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n  }): true;\n\n  /** Use this method for your bot to leave a group, supergroup or channel. Returns True on success. */\n  leaveChat(args: {\n    /** Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername) */\n    chat_id: number | string;\n  }): true;\n\n  /** Use this method to get up-to-date information about the chat. Returns a ChatFullInfo object on success. */\n  getChat(args: {\n    /** Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername) */\n    chat_id: number | string;\n  }): ChatFullInfo;\n\n  /** Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of ChatMember objects. */\n  getChatAdministrators(args: {\n    /** Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername) */\n    chat_id: number | string;\n  }): Array<ChatMemberOwner | ChatMemberAdministrator>;\n\n  /** Use this method to get the number of members in a chat. Returns Int on success.\n   * @deprecated Use `getChatMemberCount` instead. */\n  getChatMembersCount: ApiMethods<F>[\"getChatMemberCount\"];\n\n  /** Use this method to get the number of members in a chat. Returns Int on success. */\n  getChatMemberCount(args: {\n    /** Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername) */\n    chat_id: number | string;\n  }): number;\n\n  /** Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a ChatMember object on success. */\n  getChatMember(args: {\n    /** Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target user */\n    user_id: number;\n  }): ChatMember;\n\n  /** Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set ly returned in getChat requests to check if the bot can use this method. Returns True on success. */\n  setChatStickerSet(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** Name of the sticker set to be set as the group sticker set */\n    sticker_set_name: string;\n  }): true;\n\n  /** Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set ly returned in getChat requests to check if the bot can use this method. Returns True on success. */\n  deleteChatStickerSet(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n  }): true;\n\n  /** Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects. */\n  getForumTopicIconStickers(): Sticker[];\n  /** Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object. */\n  createForumTopic(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** Topic name, 1-128 characters */\n    name: string;\n    /** Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F) */\n    icon_color?:\n      | 0x6FB9F0\n      | 0xFFD67E\n      | 0xCB86DB\n      | 0x8EEE98\n      | 0xFF93B2\n      | 0xFB6F5F;\n    /** Unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers. */\n    icon_custom_emoji_id?: string;\n  }): ForumTopic;\n\n  /** Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. */\n  editForumTopic(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread of the forum topic */\n    message_thread_id: number;\n    /** New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept */\n    name?: string;\n    /** New unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept */\n    icon_custom_emoji_id?: string;\n  }): true;\n\n  /** Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. */\n  closeForumTopic(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread of the forum topic */\n    message_thread_id: number;\n  }): true;\n\n  /** Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. */\n  reopenForumTopic(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread of the forum topic */\n    message_thread_id: number;\n  }): true;\n\n  /** Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success. */\n  deleteForumTopic(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread of the forum topic */\n    message_thread_id: number;\n  }): true;\n\n  /** Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success. */\n  unpinAllForumTopicMessages(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread of the forum topic */\n    message_thread_id: number;\n  }): true;\n\n  /** Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success. */\n  editGeneralForumTopic(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n    /** New topic name, 1-128 characters */\n    name: string;\n  }): true;\n\n  /** Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success. */\n  closeGeneralForumTopic(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n  }): true;\n\n  /** Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success. */\n  reopenGeneralForumTopic(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n  }): true;\n\n  /** Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success. */\n  hideGeneralForumTopic(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n  }): true;\n\n  /** Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success. */\n  unhideGeneralForumTopic(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n  }): true;\n\n  /** Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success. */\n  unpinAllGeneralForumTopicMessages(args: {\n    /** Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) */\n    chat_id: number | string;\n  }): true;\n\n  /** Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.\n\n  Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via @BotFather and accept the terms. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter. */\n  answerCallbackQuery(args: {\n    /** Unique identifier for the query to be answered */\n    callback_query_id: string;\n    /** Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters */\n    text?: string;\n    /** If True, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false. */\n    show_alert?: boolean;\n    /** URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @BotFather, specify the URL that opens your game - note that this will only work if the query comes from a callback_game button.\n\n    Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter. */\n    url?: string;\n    /** The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0. */\n    cache_time?: number;\n  }): true;\n\n  /** Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a UserChatBoosts object. */\n  getUserChatBoosts(args: {\n    /** Unique identifier for the chat or username of the channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier of the target user */\n    user_id: number;\n  }): UserChatBoosts;\n\n  /** Use this method to get information about the connection of the bot with a business account. Returns a BusinessConnection object on success. */\n  getBusinessConnection(args: {\n    /** Unique identifier of the business connection */\n    business_connection_id: string;\n  }): BusinessConnection;\n\n  /** Use this method to change the list of the bot's commands. See https://core.telegram.org/bots/features#commands for more details about bot commands. Returns True on success. */\n  setMyCommands(args: {\n    /** A list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified. */\n    commands: readonly BotCommand[];\n    /** An object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault. */\n    scope?: BotCommandScope;\n    /** A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands */\n    language_code?: LanguageCode;\n  }): true;\n\n  /** Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success. */\n  deleteMyCommands(args: {\n    /** An object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault. */\n    scope?: BotCommandScope;\n    /** A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands */\n    language_code?: LanguageCode;\n  }): true;\n\n  /** Use this method to get the current list of the bot's commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned. */\n  getMyCommands(args: {\n    /** An object, describing scope of users. Defaults to BotCommandScopeDefault. */\n    scope?: BotCommandScope;\n    /** A two-letter ISO 639-1 language code or an empty string */\n    language_code?: LanguageCode;\n  }): BotCommand[];\n\n  /** Use this method to change the bot's name. Returns True on success. */\n  setMyName(args: {\n    /** New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language. */\n    name?: string;\n    /** A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name. */\n    language_code?: LanguageCode;\n  }): true;\n\n  /** Use this method to get the current bot name for the given user language. Returns BotName on success. */\n  getMyName(args: {\n    /** A two-letter ISO 639-1 language code or an empty string */\n    language_code?: LanguageCode;\n  }): BotName;\n\n  /** Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success. */\n  setMyDescription(args: {\n    /** New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language. */\n    description?: string;\n    /** A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description. */\n    language_code?: LanguageCode;\n  }): true;\n\n  /** Use this method to get the current bot description for the given user language. Returns BotDescription on success. */\n  getMyDescription(args: {\n    /** A two-letter ISO 639-1 language code or an empty string */\n    language_code?: LanguageCode;\n  }): BotDescription;\n\n  /** Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success. */\n  setMyShortDescription(args: {\n    /** New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language. */\n    short_description?: string;\n    /** A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description. */\n    language_code?: LanguageCode;\n  }): true;\n\n  /** Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success. */\n  getMyShortDescription(args: {\n    /** A two-letter ISO 639-1 language code or an empty string */\n    language_code?: LanguageCode;\n  }): BotShortDescription;\n\n  /** Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success. */\n  setChatMenuButton(args: {\n    /** Unique identifier for the target private chat. If not specified, default bot's menu button will be changed */\n    chat_id?: number;\n    /** An object for the bot's new menu button. Defaults to MenuButtonDefault */\n    menu_button?: MenuButton;\n  }): true;\n\n  /** Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success. */\n  getChatMenuButton(args: {\n    /** Unique identifier for the target private chat. If not specified, default bot's menu button will be returned */\n    chat_id?: number;\n  }): MenuButton;\n\n  /** Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns True on success. */\n  setMyDefaultAdministratorRights(args: {\n    /** An object describing new default administrator rights. If not specified, the default administrator rights will be cleared. */\n    rights?: ChatAdministratorRights;\n    /** Pass True to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed. */\n    for_channels?: boolean;\n  }): true;\n\n  /** Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success. */\n  getMyDefaultAdministratorRights(args: {\n    /** Pass True to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned. */\n    for_channels?: boolean;\n  }): ChatAdministratorRights;\n\n  /** Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent. */\n  editMessageText(args: {\n    /** Unique identifier of the business connection on behalf of which the message to be edited was sent */\n    business_connection_id?: string;\n    /** Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id?: number | string;\n    /** Required if inline_message_id is not specified. Identifier of the message to edit */\n    message_id?: number;\n    /** Required if chat_id and message_id are not specified. Identifier of the inline message */\n    inline_message_id?: string;\n    /** New text of the message, 1-4096 characters after entities parsing */\n    text: string;\n    /** Mode for parsing entities in the message text. See formatting options for more details. */\n    parse_mode?: ParseMode;\n    /** A list of special entities that appear in message text, which can be specified instead of parse_mode */\n    entities?: MessageEntity[];\n    /** Link preview generation options for the message */\n    link_preview_options?: LinkPreviewOptions;\n    /** An object for an inline keyboard. */\n    reply_markup?: InlineKeyboardMarkup;\n  }): (Update.Edited & Message.TextMessage) | true;\n\n  /** Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent. */\n  editMessageCaption(args: {\n    /** Unique identifier of the business connection on behalf of which the message to be edited was sent */\n    business_connection_id?: string;\n    /** Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id?: number | string;\n    /** Required if inline_message_id is not specified. Identifier of the message to edit */\n    message_id?: number;\n    /** Required if chat_id and message_id are not specified. Identifier of the inline message */\n    inline_message_id?: string;\n    /** New caption of the message, 0-1024 characters after entities parsing */\n    caption?: string;\n    /** Mode for parsing entities in the message caption. See formatting options for more details. */\n    parse_mode?: ParseMode;\n    /** A list of special entities that appear in the caption, which can be specified instead of parse_mode */\n    caption_entities?: MessageEntity[];\n    /** Pass True, if the caption must be shown above the message media. Supported only for animation, photo and video messages. */\n    show_caption_above_media?: boolean;\n    /** An object for an inline keyboard. */\n    reply_markup?: InlineKeyboardMarkup;\n  }): (Update.Edited & Message.CaptionableMessage) | true;\n\n  /** Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent. */\n  editMessageMedia(args: {\n    /** Unique identifier of the business connection on behalf of which the message to be edited was sent */\n    business_connection_id?: string;\n    /** Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id?: number | string;\n    /** Required if inline_message_id is not specified. Identifier of the message to edit */\n    message_id?: number;\n    /** Required if chat_id and message_id are not specified. Identifier of the inline message */\n    inline_message_id?: string;\n    /** An object for a new media content of the message */\n    media: InputMedia<F>;\n    /** An object for a new inline keyboard. */\n    reply_markup?: InlineKeyboardMarkup;\n  }): (Update.Edited & Message) | true;\n\n  /** Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent. */\n  editMessageReplyMarkup(args: {\n    /** Unique identifier of the business connection on behalf of which the message to be edited was sent */\n    business_connection_id?: string;\n    /** Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id?: number | string;\n    /** Required if inline_message_id is not specified. Identifier of the message to edit */\n    message_id?: number;\n    /** Required if chat_id and message_id are not specified. Identifier of the inline message */\n    inline_message_id?: string;\n    /** An object for an inline keyboard. */\n    reply_markup?: InlineKeyboardMarkup;\n  }): (Update.Edited & Message) | true;\n\n  /** Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned. */\n  stopPoll(args: {\n    /** Unique identifier of the business connection on behalf of which the message to be edited was sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Identifier of the original message with the poll */\n    message_id: number;\n    /** An object for a new message inline keyboard. */\n    reply_markup?: InlineKeyboardMarkup;\n  }): Poll;\n\n  /** Use this method to delete a message, including service messages, with the following limitations:\n  - A message can only be deleted if it was sent less than 48 hours ago.\n  - Service messages about a supergroup, channel, or forum topic creation can't be deleted.\n  - A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.\n  - Bots can delete outgoing messages in private chats, groups, and supergroups.\n  - Bots can delete incoming messages in private chats.\n  - Bots granted can_post_messages permissions can delete outgoing messages in channels.\n  - If the bot is an administrator of a group, it can delete any message there.\n  - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.\n  Returns True on success. */\n  deleteMessage(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Identifier of the message to delete */\n    message_id: number;\n  }): true;\n\n  /** Use this method to delete multiple messages simultaneously. Returns True on success. */\n  deleteMessages(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** A list of 1-100 identifiers of messages to delete. See deleteMessage for limitations on which messages can be deleted */\n    message_ids: number[];\n  }): true;\n\n  /** Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned. */\n  sendSticker(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP, .TGS, or .WEBM sticker using multipart/form-data. Video and animated stickers can't be sent via an HTTP URL. */\n    sticker: F | string;\n    /** Emoji associated with the sticker; only for just uploaded stickers */\n    emoji?: string;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** Additional interface options. An object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user. */\n    reply_markup?:\n      | InlineKeyboardMarkup\n      | ReplyKeyboardMarkup\n      | ReplyKeyboardRemove\n      | ForceReply;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.StickerMessage;\n\n  /** Use this method to get a sticker set. On success, a StickerSet object is returned. */\n  getStickerSet(args: {\n    /** Name of the sticker set */\n    name: string;\n  }): StickerSet;\n\n  /** Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects. */\n  getCustomEmojiStickers(args: {\n    /** A list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified. */\n    custom_emoji_ids: string[];\n  }): Sticker[];\n\n  /** Use this method to upload a file with a sticker for later use in the createNewStickerSet, addStickerToSet, or replaceStickerInSet methods (the file can be used multiple times). Returns the uploaded File on success. */\n  uploadStickerFile(args: {\n    /** User identifier of sticker file owner */\n    user_id: number;\n    /** Format of the sticker, must be one of “static”, “animated”, “video” */\n    sticker_format: \"static\" | \"animated\" | \"video\";\n    /** A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. See https://core.telegram.org/stickers for technical requirements. */\n    sticker: F;\n  }): File;\n\n  /** Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success. */\n  createNewStickerSet(args: {\n    /** User identifier of created sticker set owner */\n    user_id: number;\n    /** Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only English letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in \"_by_<bot_username>\". <bot_username> is case insensitive. 1-64 characters. */\n    name: string;\n    /** Sticker set title, 1-64 characters */\n    title: string;\n    /** A list of 1-50 initial stickers to be added to the sticker set */\n    stickers: InputSticker<F>[];\n    /** Type of stickers in the set, pass “regular”, “mask”, or “custom_emoji”. By default, a regular sticker set is created. */\n    sticker_type?: \"regular\" | \"mask\" | \"custom_emoji\";\n    /** Pass True if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only */\n    needs_repainting?: boolean;\n  }): true;\n\n  /** Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns True on success. */\n  addStickerToSet(args: {\n    /** User identifier of sticker set owner */\n    user_id: number;\n    /** Sticker set name */\n    name: string;\n    /** An object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set isn't changed. */\n    sticker: InputSticker<F>;\n  }): true;\n\n  /** Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success. */\n  setStickerPositionInSet(args: {\n    /** File identifier of the sticker */\n    sticker: string;\n    /** New sticker position in the set, zero-based */\n    position: number;\n  }): true;\n\n  /** Use this method to delete a sticker from a set created by the bot. Returns True on success. */\n  deleteStickerFromSet(args: {\n    /** File identifier of the sticker */\n    sticker: string;\n  }): true;\n\n  /** Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling deleteStickerFromSet, then addStickerToSet, then setStickerPositionInSet. Returns True on success. */\n  replaceStickerInSet(args: {\n    /** User identifier of the sticker set owner */\n    user_id: number;\n    /** Sticker set name */\n    name: string;\n    /** File identifier of the replaced sticker */\n    old_sticker: string;\n    /** An object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set remains unchanged.:x */\n    sticker: InputSticker<F>;\n  }): true;\n\n  /** Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success. */\n  setStickerEmojiList(args: {\n    /** File identifier of the sticker */\n    sticker: string;\n    /** A list of 1-20 emoji associated with the sticker */\n    emoji_list: string[];\n  }): true;\n\n  /** Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success. */\n  setStickerKeywords(args: {\n    /** File identifier of the sticker */\n    sticker: string;\n    /** A list of 0-20 search keywords for the sticker with total length of up to 64 characters */\n    keywords?: string[];\n  }): true;\n\n  /** Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success. */\n  setStickerMaskPosition(args: {\n    /** File identifier of the sticker */\n    sticker: string;\n    /** An object with the position where the mask should be placed on faces. Omit the parameter to remove the mask position. */\n    mask_position?: MaskPosition;\n  }): true;\n\n  /** Use this method to set the title of a created sticker set. Returns True on success. */\n  setStickerSetTitle(args: {\n    /** Sticker set name */\n    name: string;\n    /** Sticker set title, 1-64 characters */\n    title: string;\n  }): true;\n\n  /** Use this method to delete a sticker set that was created by the bot. Returns True on success. */\n  deleteStickerSet(args: {\n    /** Sticker set name */\n    name: string;\n  }): true;\n\n  /** Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success. */\n  setStickerSetThumbnail(args: {\n    /** Sticker set name */\n    name: string;\n    /** User identifier of the sticker set owner */\n    user_id: number;\n    /** A .WEBP or .PNG image with the thumbnail, must be up to 128 kilobytes in size and have a width and height of exactly 100px, or a .TGS animation with a thumbnail up to 32 kilobytes in size (see https://core.telegram.org/stickers#animated-sticker-requirements for animated sticker technical requirements), or a WEBM video with the thumbnail up to 32 kilobytes in size; see https://core.telegram.org/stickers#video-sticker-requirements for video sticker technical requirements. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files ». Animated and video sticker set thumbnails can't be uploaded via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail. */\n    thumbnail?: F | string;\n    /** Format of the thumbnail, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, or “video” for a WEBM video */\n    format: \"static\" | \"animated\" | \"video\";\n  }): true;\n\n  /** Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success. */\n  setCustomEmojiStickerSetThumbnail(args: {\n    /** Sticker set name */\n    name: string;\n    /** Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail. */\n    custom_emoji_id?: string;\n  }): true;\n\n  /** Use this method to send answers to an inline query. On success, True is returned.\n  No more than 50 results per query are allowed.\n\n  Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities. */\n  answerInlineQuery(args: {\n    /** Unique identifier for the answered query */\n    inline_query_id: string;\n    /** An array of results for the inline query */\n    results: readonly InlineQueryResult[];\n    /** The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300. */\n    cache_time?: number;\n    /** Pass True if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query. */\n    is_personal?: boolean;\n    /** Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes. */\n    next_offset?: string;\n    /** An object describing a button to be shown above inline query results */\n    button?: InlineQueryResultsButton;\n  }): true;\n\n  /** Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned. */\n  answerWebAppQuery(args: {\n    /** Unique identifier for the query to be answered */\n    web_app_query_id: string;\n    /** An object describing the message to be sent */\n    result: InlineQueryResult;\n  }): SentWebAppMessage;\n\n  /** Use this method to send invoices. On success, the sent Message is returned. */\n  sendInvoice(args: {\n    /** Unique identifier for the target chat or username of the target channel (in the format @channelusername) */\n    chat_id: number | string;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Product name, 1-32 characters */\n    title: string;\n    /** Product description, 1-255 characters */\n    description: string;\n    /** Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. */\n    payload: string;\n    /** Payment provider token, obtained via BotFather. Pass an empty string for payments in Telegram Stars. */\n    provider_token?: string;\n    /** Three-letter ISO 4217 currency code, see more on currencies. Pass “XTR” for payments in Telegram Stars. */\n    currency: string;\n    /** Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in Telegram Stars. */\n    prices: readonly LabeledPrice[];\n    /** The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in Telegram Stars. */\n    max_tip_amount?: number;\n    /** An array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount. */\n    suggested_tip_amounts?: number[];\n    /** Unique deep-linking parameter. If left empty, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a URL button with a deep link to the bot (instead of a Pay button), with the value used as the start parameter */\n    start_parameter?: string;\n    /** Data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider. */\n    provider_data?: string;\n    /** URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for. */\n    photo_url?: string;\n    /** Photo size in bytes */\n    photo_size?: number;\n    /** Photo width */\n    photo_width?: number;\n    /** Photo height */\n    photo_height?: number;\n    /** Pass True if you require the user's full name to complete the order. Ignored for payments in Telegram Stars. */\n    need_name?: boolean;\n    /** Pass True if you require the user's phone number to complete the order. Ignored for payments in Telegram Stars. */\n    need_phone_number?: boolean;\n    /** Pass True if you require the user's email address to complete the order. Ignored for payments in Telegram Stars. */\n    need_email?: boolean;\n    /** Pass True if you require the user's shipping address to complete the order. Ignored for payments in Telegram Stars. */\n    need_shipping_address?: boolean;\n    /** Pass True if the user's phone number should be sent to provider. Ignored for payments in Telegram Stars. */\n    send_phone_number_to_provider?: boolean;\n    /** Pass True if the user's email address should be sent to provider. Ignored for payments in Telegram Stars. */\n    send_email_to_provider?: boolean;\n    /** Pass True if the final price depends on the shipping method. Ignored for payments in Telegram Stars. */\n    is_flexible?: boolean;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** An object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button. */\n    reply_markup?: InlineKeyboardMarkup;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.InvoiceMessage;\n\n  /** Use this method to create a link for an invoice. Returns the created invoice link as String on success. */\n  createInvoiceLink(args: {\n    /** Product name, 1-32 characters */\n    title: string;\n    /** Product description, 1-255 characters */\n    description: string;\n    /** Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. */\n    payload: string;\n    /** Payment provider token, obtained via @BotFather. Pass an empty string for payments in Telegram Stars. */\n    provider_token?: string;\n    /** Three-letter ISO 4217 currency code, see more on currencies */\n    currency: string;\n    /** Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.) */\n    prices: LabeledPrice[];\n    /** The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0 */\n    max_tip_amount?: number;\n    /** An array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount. */\n    suggested_tip_amounts?: number[];\n    /** Data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider. */\n    provider_data?: string;\n    /** URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. */\n    photo_url?: string;\n    /** Photo size in bytes */\n    photo_size?: number;\n    /** Photo width */\n    photo_width?: number;\n    /** Photo height */\n    photo_height?: number;\n    /** Pass True if you require the user's full name to complete the order */\n    need_name?: boolean;\n    /** Pass True if you require the user's phone number to complete the order */\n    need_phone_number?: boolean;\n    /** Pass True if you require the user's email address to complete the order */\n    need_email?: boolean;\n    /** Pass True if you require the user's shipping address to complete the order */\n    need_shipping_address?: boolean;\n    /** Pass True if the user's phone number should be sent to the provider */\n    send_phone_number_to_provider?: boolean;\n    /** Pass True if the user's email address should be sent to the provider */\n    send_email_to_provider?: boolean;\n    /** Pass True if the final price depends on the shipping method */\n    is_flexible?: boolean;\n  }): string;\n\n  /** If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned. */\n  answerShippingQuery(args: {\n    /** Unique identifier for the query to be answered */\n    shipping_query_id: string;\n    /** Pass True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible) */\n    ok: boolean;\n    /** Required if ok is True. An array of available shipping options. */\n    shipping_options?: readonly ShippingOption[];\n    /** Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user. */\n    error_message?: string;\n  }): true;\n\n  /** Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent. */\n  answerPreCheckoutQuery(args: {\n    /** Unique identifier for the query to be answered */\n    pre_checkout_query_id: string;\n    /** Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems. */\n    ok: boolean;\n    /** Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user. */\n    error_message?: string;\n  }): true;\n\n  /** Returns the bot's Telegram Star transactions in chronological order. On success, returns a StarTransactions object. */\n  getStarTransactions(args: {\n    /** Number of transactions to skip in the response */\n    offset?: number;\n    /** The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to 100. */\n    limit?: number;\n  }): StarTransactions;\n\n  /** Refunds a successful payment in Telegram Stars. Returns True on success. */\n  refundStarPayment(args: {\n    /** Identifier of the user whose payment will be refunded */\n    user_id: number;\n    /** Telegram payment identifier */\n    telegram_payment_charge_id: string;\n  }): true;\n\n  /** Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.\n\n  Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues. */\n  setPassportDataErrors(args: {\n    /** User identifier */\n    user_id: number;\n    /** An array describing the errors */\n    errors: readonly PassportElementError[];\n  }): true;\n\n  /** Use this method to send a game. On success, the sent Message is returned. */\n  sendGame(args: {\n    /** Unique identifier of the business connection on behalf of which the message will be sent */\n    business_connection_id?: string;\n    /** Unique identifier for the target chat */\n    chat_id: number;\n    /** Unique identifier for the target message thread (topic) of the forum; for forum supergroups only */\n    message_thread_id?: number;\n    /** Short name of the game, serves as the unique identifier for the game. Set up your games via BotFather. */\n    game_short_name: string;\n    /** Sends the message silently. Users will receive a notification with no sound. */\n    disable_notification?: boolean;\n    /** Protects the contents of the sent message from forwarding and saving */\n    protect_content?: boolean;\n    /** Unique identifier of the message effect to be added to the message; for private chats only */\n    message_effect_id?: string;\n    /** Description of the message to reply to */\n    reply_parameters?: ReplyParameters;\n    /** An object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game. */\n    reply_markup?: InlineKeyboardMarkup;\n    /** @deprecated Use `reply_parameters` instead. */\n    reply_to_message_id?: number;\n  }): Message.GameMessage;\n\n  /** Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False. */\n  setGameScore(args: {\n    /** User identifier */\n    user_id: number;\n    /** New score, must be non-negative */\n    score: number;\n    /** Pass True if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters */\n    force?: boolean;\n    /** Pass True if the game message should not be automatically edited to include the current scoreboard */\n    disable_edit_message?: boolean;\n    /** Required if inline_message_id is not specified. Unique identifier for the target chat */\n    chat_id?: number;\n    /** Required if inline_message_id is not specified. Identifier of the sent message */\n    message_id?: number;\n    /** Required if chat_id and message_id are not specified. Identifier of the inline message */\n    inline_message_id?: string;\n  }): (Update.Edited & Message.GameMessage) | true;\n\n  /** Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of GameHighScore objects.\n\n  This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change. */\n  getGameHighScores(args: {\n    /** Target user id */\n    user_id: number;\n    /** Required if inline_message_id is not specified. Unique identifier for the target chat */\n    chat_id?: number;\n    /** Required if inline_message_id is not specified. Identifier of the sent message */\n    message_id?: number;\n    /** Required if chat_id and message_id are not specified. Identifier of the inline message */\n    inline_message_id?: string;\n  }): GameHighScore[];\n};\n\n/** This object describes a sticker to be added to a sticker set. */\nexport interface InputSticker<F> {\n  /** The added sticker. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. Animated and video stickers can't be uploaded via HTTP URL. */\n  sticker: F | string;\n  /** Format of the added sticker, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, “video” for a WEBM video */\n  format: \"static\" | \"animated\" | \"video\";\n  /** List of 1-20 emoji associated with the sticker */\n  emoji_list: string[];\n  /** Position where the mask should be placed on faces. For “mask” stickers only. */\n  mask_position?: MaskPosition;\n  /** List of 0-20 search keywords for the sticker with total length of up to 64 characters. For “regular” and “custom_emoji” stickers only. */\n  keywords?: string[];\n}\n\n/** This object represents the content of a media message to be sent. It should be one of\n  - InputMediaAnimation\n  - InputMediaDocument\n  - InputMediaAudio\n  - InputMediaPhoto\n  - InputMediaVideo */\nexport type InputMedia<F> =\n  | InputMediaAnimation<F>\n  | InputMediaDocument<F>\n  | InputMediaAudio<F>\n  | InputMediaPhoto<F>\n  | InputMediaVideo<F>;\n\n/** Represents a photo to be sent. */\nexport interface InputMediaPhoto<F> {\n  /** Type of the result, must be photo */\n  type: \"photo\";\n  /** File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. */\n  media: F | string;\n  /** Caption of the photo to be sent, 0-1024 characters after entities parsing */\n  caption?: string;\n  /** Pass True, if the caption must be shown above the message media */\n  show_caption_above_media?: boolean;\n  /** Mode for parsing entities in the photo caption. See formatting options for more details. */\n  parse_mode?: ParseMode;\n  /** List of special entities that appear in the caption, which can be specified instead of parse_mode */\n  caption_entities?: MessageEntity[];\n  /** Pass True if the photo needs to be covered with a spoiler animation */\n  has_spoiler?: boolean;\n}\n\n/** Represents a video to be sent. */\nexport interface InputMediaVideo<F> {\n  /** Type of the result, must be video */\n  type: \"video\";\n  /** File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. */\n  media: F | string;\n  /** Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. */\n  thumbnail?: F;\n  /** Caption of the video to be sent, 0-1024 characters after entities parsing */\n  caption?: string;\n  /** Pass True, if the caption must be shown above the message media */\n  show_caption_above_media?: boolean;\n  /** Mode for parsing entities in the video caption. See formatting options for more details. */\n  parse_mode?: ParseMode;\n  /** List of special entities that appear in the caption, which can be specified instead of parse_mode */\n  caption_entities?: MessageEntity[];\n  /** Video width */\n  width?: number;\n  /** Video height */\n  height?: number;\n  /** Video duration in seconds */\n  duration?: number;\n  /** Pass True if the uploaded video is suitable for streaming */\n  supports_streaming?: boolean;\n  /** Pass True if the photo needs to be covered with a spoiler animation */\n  has_spoiler?: boolean;\n}\n\n/** Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent. */\nexport interface InputMediaAnimation<F> {\n  /** Type of the result, must be animation */\n  type: \"animation\";\n  /** File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. */\n  media: F | string;\n  /** Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. */\n  thumbnail?: F;\n  /** Caption of the animation to be sent, 0-1024 characters after entities parsing */\n  caption?: string;\n  /** Pass True, if the caption must be shown above the message media */\n  show_caption_above_media?: boolean;\n  /** Mode for parsing entities in the animation caption. See formatting options for more details. */\n  parse_mode?: ParseMode;\n  /** List of special entities that appear in the caption, which can be specified instead of parse_mode */\n  caption_entities?: MessageEntity[];\n  /** Animation width */\n  width?: number;\n  /** Animation height */\n  height?: number;\n  /** Animation duration in seconds */\n  duration?: number;\n  /** Pass True if the photo needs to be covered with a spoiler animation */\n  has_spoiler?: boolean;\n}\n\n/** Represents an audio file to be treated as music to be sent. */\nexport interface InputMediaAudio<F> {\n  /** Type of the result, must be audio */\n  type: \"audio\";\n  /** File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. */\n  media: F | string;\n  /** Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. */\n  thumbnail?: F;\n  /** Caption of the audio to be sent, 0-1024 characters after entities parsing */\n  caption?: string;\n  /** Mode for parsing entities in the audio caption. See formatting options for more details. */\n  parse_mode?: ParseMode;\n  /** List of special entities that appear in the caption, which can be specified instead of parse_mode */\n  caption_entities?: MessageEntity[];\n  /** Duration of the audio in seconds */\n  duration?: number;\n  /** Performer of the audio */\n  performer?: string;\n  /** Title of the audio */\n  title?: string;\n}\n\n/** Represents a general file to be sent. */\nexport interface InputMediaDocument<F> {\n  /** Type of the result, must be document */\n  type: \"document\";\n  /** File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. */\n  media: F | string;\n  /** Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. */\n  thumbnail?: F;\n  /** Caption of the document to be sent, 0-1024 characters after entities parsing */\n  caption?: string;\n  /** Mode for parsing entities in the document caption. See formatting options for more details. */\n  parse_mode?: ParseMode;\n  /** List of special entities that appear in the caption, which can be specified instead of parse_mode */\n  caption_entities?: MessageEntity[];\n  /** Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album. */\n  disable_content_type_detection?: boolean;\n}\n\n/** This object describes the paid media to be sent. Currently, it can be one of\n\n- InputPaidMediaPhoto\n- InputPaidMediaVideo */\nexport type InputPaidMedia<F> = InputMediaPhoto<F> | InputPaidMediaVideo<F>;\n\n/** The paid media to send is a photo. */\nexport interface InputPaidMediaPhoto<F> {\n  /** Type of the media, must be photo */\n  type: \"photo\";\n  /** File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files » */\n  media: F | string;\n}\n\n/** The paid media to send is a video. */\nexport interface InputPaidMediaVideo<F> {\n  /** Type of the media, must be video */\n  type: \"video\";\n  /** File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files » */\n  media: F | string;\n  /** Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files » */\n  thumbnail?: F | string;\n  /** Video width */\n  width?: number;\n  /** Video height */\n  height?: number;\n  /** Video duration in seconds */\n  duration?: number;\n  /** Pass True if the uploaded video is suitable for streaming */\n  supports_streaming?: boolean;\n}\n"],"names":[],"mappings":"AAAA,kCAAkC"}