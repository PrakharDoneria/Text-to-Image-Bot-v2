/** Describes Telegram Passport data shared with the bot by the user. */ //# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["https://deno.land/x/grammy_types@v3.11.0/passport.ts"],"sourcesContent":["/** Describes Telegram Passport data shared with the bot by the user. */\nexport interface PassportData {\n  /** Array with information about documents and other Telegram Passport elements that was shared with the bot */\n  data: EncryptedPassportElement[];\n  /** Encrypted credentials required to decrypt the data */\n  credentials: EncryptedCredentials;\n}\n\n/** This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB. */\nexport interface PassportFile {\n  /** Identifier for this file, which can be used to download or reuse the file */\n  file_id: string;\n  /** Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. */\n  file_unique_id: string;\n  /** File size in bytes */\n  file_size: number;\n  /** Unix time when the file was uploaded */\n  file_date: number;\n}\n\n/** Describes documents or other Telegram Passport elements shared with the bot by the user. */\nexport interface EncryptedPassportElement {\n  /** Element type. One of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”, “phone_number”, “email”. */\n  type:\n    | \"personal_details\"\n    | \"passport\"\n    | \"driver_license\"\n    | \"identity_card\"\n    | \"internal_passport\"\n    | \"address\"\n    | \"utility_bill\"\n    | \"bank_statement\"\n    | \"rental_agreement\"\n    | \"passport_registration\"\n    | \"temporary_registration\"\n    | \"phone_number\"\n    | \"email\";\n  /** Base64-encoded encrypted Telegram Passport element data provided by the user; available only for “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport” and “address” types. Can be decrypted and verified using the accompanying EncryptedCredentials. */\n  data?: string;\n  /** User's verified phone number; available only for “phone_number” type */\n  phone_number?: string;\n  /** User's verified email address; available only for “email” type */\n  email?: string;\n  /** Array of encrypted files with documents provided by the user; available only for “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying EncryptedCredentials. */\n  files?: PassportFile[];\n  /** Encrypted file with the front side of the document, provided by the user; available only for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying EncryptedCredentials. */\n  front_side?: PassportFile;\n  /** Encrypted file with the reverse side of the document, provided by the user; available only for “driver_license” and “identity_card”. The file can be decrypted and verified using the accompanying EncryptedCredentials. */\n  reverse_side?: PassportFile;\n  /** Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying EncryptedCredentials. */\n  selfie?: PassportFile;\n  /** Array of encrypted files with translated versions of documents provided by the user; available if requested for “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying EncryptedCredentials. */\n  translation?: PassportFile[];\n  /** Base64-encoded element hash for using in PassportElementErrorUnspecified */\n  hash: string;\n}\n\n/** Describes data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes. */\nexport interface EncryptedCredentials {\n  /** Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication */\n  data: string;\n  /** Base64-encoded data hash for data authentication */\n  hash: string;\n  /** Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption */\n  secret: string;\n}\n\n/** This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:\n- PassportElementErrorDataField\n- PassportElementErrorFrontSide\n- PassportElementErrorReverseSide\n- PassportElementErrorSelfie\n- PassportElementErrorFile\n- PassportElementErrorFiles\n- PassportElementErrorTranslationFile\n- PassportElementErrorTranslationFiles\n- PassportElementErrorUnspecified\n*/\nexport type PassportElementError =\n  | PassportElementErrorDataField\n  | PassportElementErrorFrontSide\n  | PassportElementErrorReverseSide\n  | PassportElementErrorSelfie\n  | PassportElementErrorFile\n  | PassportElementErrorFiles\n  | PassportElementErrorTranslationFile\n  | PassportElementErrorTranslationFiles\n  | PassportElementErrorUnspecified;\n\n/** Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes. */\nexport interface PassportElementErrorDataField {\n  /** Error source, must be data */\n  source: \"data\";\n  /** The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address” */\n  type:\n    | \"personal_details\"\n    | \"passport\"\n    | \"driver_license\"\n    | \"identity_card\"\n    | \"internal_passport\"\n    | \"address\";\n  /** Name of the data field which has the error */\n  field_name: string;\n  /** Base64-encoded data hash */\n  data_hash: string;\n  /** Error message */\n  message: string;\n}\n\n/** Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes. */\nexport interface PassportElementErrorFrontSide {\n  /** Error source, must be front_side */\n  source: \"front_side\";\n  /** The section of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport” */\n  type: \"passport\" | \"driver_license\" | \"identity_card\" | \"internal_passport\";\n  /** Base64-encoded hash of the file with the front side of the document */\n  file_hash: string;\n  /** Error message */\n  message: string;\n}\n\n/** Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes. */\nexport interface PassportElementErrorReverseSide {\n  /** Error source, must be reverse_side */\n  source: \"reverse_side\";\n  /** The section of the user's Telegram Passport which has the issue, one of “driver_license”, “identity_card” */\n  type: \"driver_license\" | \"identity_card\";\n  /** Base64-encoded hash of the file with the reverse side of the document */\n  file_hash: string;\n  /** Error message */\n  message: string;\n}\n\n/** Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes. */\nexport interface PassportElementErrorSelfie {\n  /** Error source, must be selfie */\n  source: \"selfie\";\n  /** The section of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport” */\n  type: \"passport\" | \"driver_license\" | \"identity_card\" | \"internal_passport\";\n  /** Base64-encoded hash of the file with the selfie */\n  file_hash: string;\n  /** Error message */\n  message: string;\n}\n\n/** Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes. */\nexport interface PassportElementErrorFile {\n  /** Error source, must be file */\n  source: \"file\";\n  /** The section of the user's Telegram Passport which has the issue, one of “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration” */\n  type:\n    | \"utility_bill\"\n    | \"bank_statement\"\n    | \"rental_agreement\"\n    | \"passport_registration\"\n    | \"temporary_registration\";\n  /** Base64-encoded file hash */\n  file_hash: string;\n  /** Error message */\n  message: string;\n}\n\n/** Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes. */\nexport interface PassportElementErrorFiles {\n  /** Error source, must be files */\n  source: \"files\";\n  /** The section of the user's Telegram Passport which has the issue, one of “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration” */\n  type:\n    | \"utility_bill\"\n    | \"bank_statement\"\n    | \"rental_agreement\"\n    | \"passport_registration\"\n    | \"temporary_registration\";\n  /** List of base64-encoded file hashes */\n  file_hashes: string[];\n  /** Error message */\n  message: string;\n}\n\n/** Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes. */\nexport interface PassportElementErrorTranslationFile {\n  /** Error source, must be translation_file */\n  source: \"translation_file\";\n  /** Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration” */\n  type:\n    | \"passport\"\n    | \"driver_license\"\n    | \"identity_card\"\n    | \"internal_passport\"\n    | \"utility_bill\"\n    | \"bank_statement\"\n    | \"rental_agreement\"\n    | \"passport_registration\"\n    | \"temporary_registration\";\n  /** Base64-encoded file hash */\n  file_hash: string;\n  /** Error message */\n  message: string;\n}\n\n/** Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change. */\nexport interface PassportElementErrorTranslationFiles {\n  /** Error source, must be translation_files */\n  source: \"translation_files\";\n  /** Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration” */\n  type:\n    | \"passport\"\n    | \"driver_license\"\n    | \"identity_card\"\n    | \"internal_passport\"\n    | \"utility_bill\"\n    | \"bank_statement\"\n    | \"rental_agreement\"\n    | \"passport_registration\"\n    | \"temporary_registration\";\n  /** List of base64-encoded file hashes */\n  file_hashes: string[];\n  /** Error message */\n  message: string;\n}\n\n/** Represents an issue in an unspecified place. The error is considered resolved when new data is added. */\nexport interface PassportElementErrorUnspecified {\n  /** Error source, must be unspecified */\n  source: \"unspecified\";\n  /** Type of element of the user's Telegram Passport which has the issue */\n  type: string;\n  /** Base64-encoded element hash */\n  element_hash: string;\n  /** Error message */\n  message: string;\n}\n"],"names":[],"mappings":"AAAA,sEAAsE,GACtE"}